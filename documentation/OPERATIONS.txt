Supported:
Zero Parameter (X-Type) Instructions:
    XHALT: [no input]
        When the system reads an XHALT instruction, the message "Execution Halted" is displayed, and the console outputs
        the values of any registers and memory locations that are not equal to zero, as well as the current value of the
        program counter.

        Syntax - XHALT ();

    XENDBRANCH: [no input]
        Used in conjunction with the "IBRANCH" instruction. While IBRANCH stores what the program counter would display
        for the subsequent instruction (directly after the IBRANCH) in Register 26, XENDBRANCH selects whatever value is
        in Register 26 and checks it for validity, then sets the program counter to that value. XENDBRANCH is meant to be
        used to conclude branched statements.

        Syntax - XENDBRANCH ();

One Parameter (I-Type) Instructions:
    IJUMP: [int]
        The value of the program counter is changed to whatever number the input is. It does NOT collect this value from
        a register, but uses the raw input value.

    IBRANCH: [int]
        IBRANCH increments the program counter and stores that value in Register 26 to be used by the XENDBRANCH function.
        It then sets the program counter to whatever number the input is, same as an IJUMP.

Two Parameter (T-Type) Instructions:
    [No T-Type instructions have yet been implemented.]

Three Parameter (Null-Type) Instructions:
    ADDI: [register, register, int]
        The register in the first position is set to the sum of the value in the register in the second position and the
        raw number in the third position. The raw number can be negative to implement SUBI (which is not planned yet).

    ADD: [register, register, register]
        The register in the first position is set to the sum of the value in the register in the second position and the
        value of the register in the third position. If a register contains a negative value and is used in the ADD op,
        it will behave as normal (adding a negative number), but to subtract positive registers from each other, use SUB.

    JUMPG: [register, register, register]
        The third parameter is a register which should contain the program counter value for the instruction to jump to.
        If the value in the register of the first parameter is greater than, but NOT equal to, the value of the register
        in the second parameter, then the jump occurs, otherwise it advances to the next instruction.

    JUMPGE: [register, register, register]
        The third parameter is a register which should contain the program counter value for the instruction to jump to.
        If the value in the register of the first parameter is greater than OR equal to the value of the register in the
        second parameter, then the jump occurs, otherwise it advances to the next instruction.

    LDW: [register, register, register]
        The parameters are three registers. First, the processor goes to its Memory object, and looks at the location
        defined in the register described by the third parameter. Then it takes the register value, and adds to it
        whatever the value held in the second parameter's register is. It then takes the value found at that position, and
        loads it into the register described as the first value.

    SUB: [register, register, register]
        The register in the first position is set to the difference of the value in the register in the second position and
        the value of the register in the third position.

    STW (3 param) - Store register in val1 to a memory location offset by val2 from val3
        The parameters are three registers. First, the processor goes to its Memory object, and looks at the location
        defined in the register described by the third parameter. Then it takes the register value, and adds to it
        whatever the value held in the second parameter's register is. It then takes the value found in the first parameter
        register, and loads it into the memory location defined by the other two registers.